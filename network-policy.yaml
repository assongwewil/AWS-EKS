kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: client-one-allow-egress-ip
spec:
  podSelector:
    matchLabels:
      app: client-one
  egress:                # we create out outbound rule say we can allow traffic 
  - to:
    - podSelector:
        matchLabels:
          app: demo-app          # this policy will apply to all app labeled demo-app 
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - port: 53
      protocol: UDP
  - to:
    - ipBlock:
        cidr: 192.168.161.234/32
    ports:
    - port: 80
      protocol: TCP


apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns-access
  namespace: default
spec:
  podSelector:
    matchLabels: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53


apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ingress-app-one
  namespace: default
spec:
  podSelector:
    matchLabels:
      k8s-app: app-one
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          k8s-app: client-one
    ports:
    - protocol: TCP
      port: 80

  the link 
  https://archive.eksworkshop.com/beginner/120_network-policies/calico/stars_policy_demo/apply_network_policies/


apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: default
spec:
  order: 900   #3 I just added this/ we can add order to create precedence of the rule just like in NACL ie which rule will apply first 
  podSelector:
    matchLabels:
      role: db
  policyTypes:
    - Ingress
    - Egress
  ingress:          #we create an ingress rule saying we can allow traffic 
    - action: Deny ***** added by me/ we can add a deny action 
    - from:                # from this Ip block 
        - ipBlock:
            cidr: 172.17.0.0/16
            except:
              - 172.17.1.0/24    # except this IP 
        - namespaceSelector:
            matchLabels:
              project: myproject      # fyi this policy will be apply to a receiveer pod / this means role helper pods can not talke to any  pod or BE pod that has this policy 
        - podSelector:                # we can apply this policy to a db pod / Calico will implement this policy / this is an eks policy not calico/ calico is just the implementator 
            matchLabels:
              role: frontend    # accept traffic from or source any pod with role = frontend /  this policy will be apply to a backend or another pod  or 
      ports:
        - protocol: TCP
          port: 6379
      http:    # added by me/ we can add layer 7 or http layer rules 
        methods:
          - post 
         paths: 
          -exact: /table/*/customers  # table, objectId / customers     # in this case post will be allowed but not a get 
  egress:
    - to:
        - ipBlock:
            cidr: 10.0.0.0/24
      ports:
        - protocol: TCP
          port: 5978


The network policy specification contains the following key segments:

    metadata: similar to other Kubernetes objects, it allows you to specify the name and namespace for the given network policy.
    spec.podSelector: allows for the selection of specific pods based on their labels within the namespace to which the given network policy will be applied. If an empty pod selector or matchLabels is specified in the specification, then the policy will be applied to all the pods within the namespace.
    spec.policyTypes: specifies whether the policy will be applied to ingress traffic, egress traffic, or both for the selected pods. If you do not specify this field, then the default behavior is to apply the network policy to ingress traffic only, unless the network policy has an egress section, in which case the network policy will be applied to both ingress and egress traffic.
    ingress: allows for ingress rules to be configured that specify from which pods (podSelector), namespace (namespaceSelector), or CIDR range (ipBlock) traffic is allowed to the selected pods and which port or port range can be used. If a port or port range is not specified, any port can be used for communication.


By default, Kubernetes allows all pods to freely communicate with each other with no restrictions. Kubernetes Network Policies enable 
you to define and enforce rules on the flow of traffic between pods, namespaces, and IP blocks (CIDR ranges). They act as a virtual firewall,
 allowing you to segment and secure your cluster by specifying ingress (incoming) and egress (outgoing) network traffic rules based on various criteria 
 such as pod labels, namespaces, IP addresses, and ports.


 E-commerce ELS NETWORK POLICY 

 WHAT THIS VIDEO AND THEN THIS LINK TO UNDERSTAND NETWORK POLICY 
 https://www.youtube.com/watch?v=fPvNerbvyic&t=837s

 https://www.eksworkshop.com/docs/networking/vpc-cni/network-policies/egress


kubectl exec deployment/ui -n ui -- curl -s http://catalog.catalog/health --connect-timeout 5

WE EXEC INSIDE ONE POD AND MAKE A CURL COMMAND TO ACCESS ANOTHER POD 

   

   project Calico

   Network policy 
   connections btw pods 
   Label-based 
   declarative 


united layer 3 and 7
   Layer 3 and layer 7 rules 

   We split the role ie 

   role: frontend 

   role: helper 

   role: db 


   What if we just change a pod label from helper to FE to get access 

   We can apply this rules to service accounts to prevent the above case 

   Service Account provide an identity or lavel 5 for your pod to use 
   Every Kubernetes namespace has a default ServiceAccount,

   recommemded to create new minimally-privileged ServiceAccounts for each workload in each namespace


   default SA grant identity to all the pods in the namespace 

   service account 
   We add a service account to all pod deployment 

   cat >my-deployment.yaml <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app
spec:
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      serviceAccountName: my-service-account
      containers:
      - name: my-app
        image: public.ecr.aws/nginx/nginx:X.XX
EOF


Service acccount has the role directly or a reference to ConfigMap to get the role 
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/xxxx


apiVersion: v1
kind: ServiceAccount
metadata:
  name: eks-admin
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: eks-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: eks-admin
  namespace: kube-syste


  the link 

  https://youtu.be/fPvNerbvyic?t=1105